name: Hotfix Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests (emergency deployment only)'
        required: false
        default: false
        type: boolean
      reason:
        description: 'Reason for hotfix deployment'
        required: true
        type: string

jobs:
  validate:
    name: Validate Hotfix Request
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate inputs
        run: |
          echo "üö® HOTFIX DEPLOYMENT REQUESTED"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Skip tests: ${{ github.event.inputs.skip_tests }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Triggered by: ${{ github.actor }}"
          
          # Validate that we're deploying from main branch
          if [ "${{ github.ref_name }}" != "main" ]; then
            echo "‚ùå Hotfix deployment only allowed from main branch"
            echo "Current branch: ${{ github.ref_name }}"
            exit 1
          fi
          
          if [ -z "${{ github.event.inputs.reason }}" ]; then
            echo "‚ùå Reason is required for hotfix deployment"
            exit 1
          fi

  emergency-test:
    name: Emergency Tests
    needs: validate
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: moviedb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run critical tests only
        run: npm test -- --grep "critical|auth|security" || npm test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: moviedb_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          JWT_SECRET: test-secret-key-for-github-actions

  hotfix-deploy:
    name: Deploy Hotfix
    needs: [validate, emergency-test]
    runs-on: self-hosted
    if: always() && (needs.emergency-test.result == 'success' || github.event.inputs.skip_tests == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment backup
        run: |
          echo "Creating backup before hotfix deployment..."
          BACKUP_DIR="/home/deployer/backups/$(date +%Y%m%d_%H%M%S)_hotfix"
          mkdir -p "$BACKUP_DIR"
          
          # Backup current application
          if [ -d "/home/deployer/apps/movietok/backend" ]; then
            cp -r /home/deployer/apps/movietok/backend "$BACKUP_DIR/"
            echo "‚úÖ Backup created at $BACKUP_DIR"
          fi

      - name: Deploy hotfix
        run: |
          echo "üö® DEPLOYING HOTFIX: ${{ github.event.inputs.reason }}"
          echo "üîß Environment: ${{ github.event.inputs.environment }}"
          
          chmod +x /home/deployer/scripts/deploy-backend.sh
          /home/deployer/scripts/deploy-backend.sh

      - name: Verify hotfix deployment
        run: |
          echo "Verifying hotfix deployment..."
          sleep 15
          
          # Test health endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "‚úÖ Hotfix deployment successful (HTTP $response)"
          else
            echo "‚ùå Hotfix deployment failed (HTTP $response)"
            echo "üîÑ Attempting rollback..."
            
            # Find latest backup
            LATEST_BACKUP=$(ls -1t /home/deployer/backups/ | head -n 1)
            if [ -n "$LATEST_BACKUP" ]; then
              echo "Rolling back to $LATEST_BACKUP"
              rm -rf /home/deployer/apps/movietok/backend
              cp -r "/home/deployer/backups/$LATEST_BACKUP/backend" /home/deployer/apps/movietok/
              /home/deployer/scripts/deploy-backend.sh
            fi
            
            exit 1
          fi

      - name: Notify hotfix completion
        run: |
          echo "üö® HOTFIX DEPLOYMENT COMPLETED"
          echo "üìã Summary:"
          echo "  - Environment: ${{ github.event.inputs.environment }}"
          echo "  - Branch: ${{ github.ref_name }}"
          echo "  - Commit: ${{ github.sha }}"
          echo "  - Triggered by: ${{ github.actor }}"
          echo "  - Reason: ${{ github.event.inputs.reason }}"
          echo "  - Tests skipped: ${{ github.event.inputs.skip_tests }}"
          echo ""
          /home/deployer/scripts/status.sh