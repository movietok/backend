name: Test Backend

on:
  push:
    branches-ignore: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: moviedb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint || echo "Linting not configured"

      - name: Create test database
        run: npm run db:create:test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: moviedb_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          JWT_SECRET: test-secret-key-for-github-actions

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: moviedb_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          JWT_SECRET: test-secret-key-for-github-actions

      - name: Generate test coverage
        run: npm run test:coverage || echo "Coverage not configured"
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: moviedb_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          JWT_SECRET: test-secret-key-for-github-actions

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for security vulnerabilities
        run: npm audit --audit-level=moderate

      - name: Check package.json format
        run: npx npm-check-updates --errorLevel 1 || echo "All dependencies are up to date"

      - name: Validate environment configuration
        run: |
          echo "Checking environment configuration..."
          
          # Check if required environment files exist
          if [ ! -f ".env.example" ]; then
            echo "⚠️ Warning: .env.example file not found"
          else
            echo "✅ .env.example found"
          fi
          
          # Check if package.json has required scripts
          node -e "
            const pkg = require('./package.json');
            const requiredScripts = ['start', 'test', 'start:prod'];
            const missing = requiredScripts.filter(script => !pkg.scripts[script]);
            if (missing.length > 0) {
              console.log('❌ Missing required scripts:', missing.join(', '));
              process.exit(1);
            } else {
              console.log('✅ All required scripts found');
            }
          "