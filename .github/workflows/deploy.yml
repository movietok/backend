name: Deploy Backend to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: moviedb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create test database
        run: npm run db:create:test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: moviedb_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          JWT_SECRET: test-secret-key-for-github-actions

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: moviedb_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          JWT_SECRET: test-secret-key-for-github-actions

  deploy:
    name: Deploy to Production
    needs: test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --production

      - name: Run backend deployment script
        run: |
          echo "Starting backend deployment..."
          chmod +x /home/deployer/scripts/deploy-backend.sh
          /home/deployer/scripts/deploy-backend.sh

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          sleep 10
          chmod +x /home/deployer/scripts/status.sh
          /home/deployer/scripts/status.sh

      - name: Show logs on failure
        if: failure()
        run: |
          echo "Deployment failed. Showing logs..."
          chmod +x /home/deployer/scripts/show-logs.sh
          /home/deployer/scripts/show-logs.sh

  health-check:
    name: Health Check
    needs: deploy
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true))

    steps:
      - name: Test API endpoints
        run: |
          echo "Testing API health check..."
          
          # Wait for application to start
          sleep 15
          
          # Test health endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "‚úÖ Health check passed (HTTP $response)"
          else
            echo "‚ùå Health check failed (HTTP $response)"
            echo "Showing application logs..."
            /home/deployer/scripts/show-logs.sh
            exit 1
          fi

      - name: Test API authentication endpoints
        run: |
          echo "Testing API authentication..."
          
          # Test user registration endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:3000/api/users/register \
            -H "Content-Type: application/json" \
            -d '{"username":"test","email":"test@example.com","password":"password123"}' || echo "000")
          
          if [ "$response" = "201" ] || [ "$response" = "400" ]; then
            echo "‚úÖ User registration endpoint accessible (HTTP $response)"
          else
            echo "‚ùå User registration endpoint failed (HTTP $response)"
            exit 1
          fi

      - name: Notify deployment success
        run: |
          echo "üöÄ Backend deployment completed successfully!"
          echo "üîç Final status check:"
          /home/deployer/scripts/status.sh