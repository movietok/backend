name: Deploy Backend to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  version-check:
    name: Version Check Test
    runs-on: self-hosted
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get current version and commit info
        run: |
          echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          echo "COMMIT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
          echo "DEPLOY_TIMESTAMP=$(date -u +%Y%m%d_%H%M%S)" >> $GITHUB_ENV

      - name: Check if server is responsive
        run: |
          echo "üîç Testing server responsiveness..."
          
          # Test if server responds at all
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health --connect-timeout 10 || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "‚úÖ Server is responsive (HTTP $response)"
          else
            echo "‚ùå Server not responding (HTTP $response)"
            echo "This might be the first deployment or server is starting up"
            echo "Continuing with deployment..."
          fi

      - name: Store pre-deployment version
        run: |
          echo "üìä Checking current deployed version..."
          
          # Get current deployed version (if any)
          current_version=$(curl -s http://localhost:3000/api/health --connect-timeout 5 | jq -r '.version // "none"' 2>/dev/null || echo "none")
          current_commit=$(curl -s http://localhost:3000/api/health --connect-timeout 5 | jq -r '.commit // "none"' 2>/dev/null || echo "none")
          
          echo "CURRENT_DEPLOYED_VERSION=$current_version" >> $GITHUB_ENV
          echo "CURRENT_DEPLOYED_COMMIT=$current_commit" >> $GITHUB_ENV
          
          echo "üìã Current state:"
          echo "  Deployed version: $current_version"
          echo "  Deployed commit: $current_commit"
          echo "  New version: $PACKAGE_VERSION"
          echo "  New commit: $COMMIT_SHA"

  deploy:
    name: Deploy to Production
    needs: version-check
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --production

      - name: Run backend deployment script
        run: |
          echo "Starting backend deployment..."
          chmod +x /home/deployer/scripts/deploy-backend.sh
          /home/deployer/scripts/deploy-backend.sh

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          sleep 10
          chmod +x /home/deployer/scripts/status.sh
          /home/deployer/scripts/status.sh

      - name: Show logs on failure
        if: failure()
        run: |
          echo "Deployment failed. Showing logs..."
          chmod +x /home/deployer/scripts/show-logs.sh
          /home/deployer/scripts/show-logs.sh

  version-verification:
    name: Verify Deployment Version
    needs: deploy
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true))

    steps:
      - name: Wait for application restart
        run: |
          echo "‚è≥ Waiting for application to restart..."
          sleep 30
          
      - name: Verify deployment by checking version
        run: |
          echo "üîç Verifying deployment by checking API version..."
          
          # Get current deployed version
          health_response=$(curl -s http://localhost:3000/api/health --connect-timeout 15)
          response_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health --connect-timeout 15)
          
          if [ "$response_code" = "200" ]; then
            deployed_version=$(echo "$health_response" | jq -r '.version // "unknown"')
            deployed_commit=$(echo "$health_response" | jq -r '.commit // "unknown"')
            uptime=$(echo "$health_response" | jq -r '.uptime // 0')
            
            echo "‚úÖ API is responding (HTTP $response_code)"
            echo "üìã Deployment verification:"
            echo "  üî¢ Deployed version: $deployed_version"
            echo "  üìù Commit: $deployed_commit"
            echo "  ‚è∞ Uptime: ${uptime}s"
            echo "  üéØ Expected commit: ${GITHUB_SHA::8}"
            
            # Check if uptime is low (indicating fresh restart)
            if [ $(echo "$uptime < 300" | bc -l 2>/dev/null || echo "1") = "1" ]; then
              echo "‚úÖ Application appears to have restarted recently (uptime: ${uptime}s)"
            fi
            
            echo "üöÄ Deployment verification completed!"
            
          else
            echo "‚ùå API health check failed (HTTP $response_code)"
            echo "Showing application logs..."
            /home/deployer/scripts/show-logs.sh
            exit 1
          fi

      - name: Final deployment status
        run: |
          echo "‚úÖ Backend deployment completed successfully!"
          echo "ÔøΩ API endpoint: http://localhost:3000/api/health"
          /home/deployer/scripts/status.sh